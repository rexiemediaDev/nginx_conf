# 
events {}

http {

    # nginx nees the file types to be anle to load css and other file type proparly
    # mime.types
    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml rss;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/x-javascript              js;
        text/plain                            txt;
        text/x-component                      htc;
        text/mathml                           mml;
        image/png                             png;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/vnd.wap.wbmp                    wbmp;
        application/java-archive              jar war ear;
        application/mac-binhex40              hqx;
        application/pdf                       pdf;
        application/x-cocoa                   cco;
        application/x-java-archive-diff       jardiff;
        application/x-java-jnlp-file          jnlp;
        application/x-makeself                run;
        application/x-perl                    pl pm;
        application/x-pilot                   prc pdb;
        application/x-rar-compressed          rar;
        application/x-redhat-package-manager  rpm;
        application/x-sea                     sea;
        application/x-shockwave-flash         swf;
        application/x-stuffit                 sit;
        application/x-tcl                     tcl tk;
        application/x-x509-ca-cert            der pem crt;
        application/x-xpinstall               xpi;
        application/zip                       zip;
        application/octet-stream              deb;
        application/octet-stream              bin exe dll;
        application/octet-stream              dmg;
        application/octet-stream              eot;
        application/octet-stream              iso img;
        application/octet-stream              msi msp msm;
        audio/mpeg                            mp3;
        audio/x-realaudio                     ra;
        video/mpeg                            mpeg mpg;
        video/quicktime                       mov;
        video/x-flv                           flv;
        video/x-msvideo                       avi;
        video/x-ms-wmv                        wmv;
        video/x-ms-asf                        asx asf;
        video/x-mng                           mng;
        # preferable since the mime.types already exist in the server which includes all the file type
        include conf/mime.types #|| mime.types;
    }
    server {
        listen 80;
        # Server name which maybe subdomain too using wildcard *.mydomain.com
        server_name localhost;  #|| IP;

        # this where nginx look for the static files of the site index.html, css etc.
        root /sites/demo; 

        # Prefix match: to match anything from this location
        location /greet {
            return 200 "Hello from Greeting but will also match /greet/anything";
        }

        # Exact match: to match specific to exact location
        location = /exact {
            return 200 "Hello from Greeting but will also match /greet";
        }

        # Regex match
        location ~* /regex[0-9] {
            return 200 "Hello from Greeting with regex with any number from 0 - 9. i.e. regex0 to regex9 and case Insensitive";
        }
    
        # Preferential prefix match
        location ^~/greet {
            return 200 "Hello from Greeting with matching the preferred skipping the first greet route";
        }

        # adding variables to location
        location /inspect {
            return 200 "$host\n$uri\n$args";
            # localhost/inspect will return 
            # req Ip
            # the path /inspect
            # and any variable added to the uri e.g. localhost/inspect?name=ray would be name=ray
        }


        if( $arg_apikey != 1234) {
            return 401 #unauthorized incorrect api key
        }

        # adding variables to location
        location /inspect {
            return 200 "$host\n$uri\n$args";
            #e.g. localhost/inspect?apikey=1234 will validate to true but without it will validate to false
        }

        # setting our own variables
        set $weekend 'No';

        if($date_local ~ 'Saturday|Sunday') {
            set $weekend 'Yes'
        }


        location /is_weekend {
            return 200 $weekend;
            #e.g. localhost/is_weekend will return yes if the day is saturday or sunday and No for every other days
        }

    # Redirect
        location /logo {
            return 307 /thumb.png;
            #e.g. since the logo is not in that location, nginx redirect the client to localhost/thumb.png
        }

    # Rewrite

        rewrite ^/user/\w+ /greet;

        location /greet {
            return 200 "Hello User";
            #visiting localhost/user/john will return the value of greet return since we rewite all matching ^/user/\w+ to /greet
            # though the broswer still showing the same user/john url but nginx rewite the request internally.
        }

# rewrite capturing variables from the request url
        rewrite ^/user/(\w+) /greet/$1; #^/user/(\w+)/(somethingels) /greet/$1 $2;
        rewrite ^/greet/john /thumb.png; #will only reolved when the uri = localhost/greet/john is requested;
         rewrite ^/user/(\w+) /greet/$1 last; #the last flag will restrict the uri to match /greet/john;


         location /greet {
             return 200 "Hello any user without extra params of name in the uri"
         }

        location = /greet/john {
            return 200 "Hello John";
            #only incoming uri with localhost/user/john will be rewritten to this route
        }
    }
}