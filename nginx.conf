# 
user    www-data;  ## Default: nobody
worker_processes  auto;  ## Default: 1
error_log  logs/error.log;
access_log logs/access.log;
pid        logs/nginx.pid;
worker_rlimit_nofile 8192;

load_module modules/ngx_http_image_filter_module.so; #loading a dynamic module

events {
    worker_connections worker_processes * 1024;
}

http {

    server_token off; #To prevent displaying nginx version and server info


    # configuration example for separate error logging per virtual host:
     error_log logs/http_error.log error;
    # nginx nees the file types to be anle to load css and other file type proparly
    # mime.types
    include mime.types;

    # Buffer size for POST submissions
    client_body_buffer_size 10k;
    client_max_body_size 8m;

    # Buffer size for Headers
    client_header_buffer_size 1k;

    # Max time to recieve client headers/body
    client_body_timeout 12;
    client_header_timeout 12;

    # Max time to keep a connection open for
    keepalive_timeout 15;

    # Max time for the client accept/recieve a response
    send_timeout 10;

    # Skip buffering for static files
    sendfile on;

    # Optimise sendfile packets
    tcp_nopush on;

    # Enabling gzip for fast huge server to client data transfer 
    gzip on;
    gzip_comp_level 3;

    gzip_types text/css;
    gzip_types text/javascript;


# Micro cahced configuration 
    fastcgi_cache_path /temp/nginx_cache levels=2 keys_zone=ZONE_1:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$request_uri"; 
    add_header X-Cache $upstream_cache_status; #To know the status of the cache from fastcgi for dynamic content

    # Define limit zone
    limit_req_zone $$request_uri zone=MyZONE:10m rate=60r/m;

    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml rss;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/x-javascript              js;
        text/plain                            txt;
        text/x-component                      htc;
        text/mathml                           mml;
        image/png                             png;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/vnd.wap.wbmp                    wbmp;
        application/java-archive              jar war ear;
        application/mac-binhex40              hqx;
        application/pdf                       pdf;
        application/x-cocoa                   cco;
        application/x-java-archive-diff       jardiff;
        application/x-java-jnlp-file          jnlp;
        application/x-makeself                run;
        application/x-perl                    pl pm;
        application/x-pilot                   prc pdb;
        application/x-rar-compressed          rar;
        application/x-redhat-package-manager  rpm;
        application/x-sea                     sea;
        application/x-shockwave-flash         swf;
        application/x-stuffit                 sit;
        application/x-tcl                     tcl tk;
        application/x-x509-ca-cert            der pem crt;
        application/x-xpinstall               xpi;
        application/zip                       zip;
        application/octet-stream              deb;
        application/octet-stream              bin exe dll;
        application/octet-stream              dmg;
        application/octet-stream              eot;
        application/octet-stream              iso img;
        application/octet-stream              msi msp msm;
        audio/mpeg                            mp3;
        audio/x-realaudio                     ra;
        video/mpeg                            mpeg mpg;
        video/quicktime                       mov;
        video/x-flv                           flv;
        video/x-msvideo                       avi;
        video/x-ms-wmv                        wmv;
        video/x-ms-asf                        asx asf;
        video/x-mng                           mng;
        # preferable since the mime.types already exist in the server which includes all the file type
        include conf/mime.types #|| mime.types;
    }

    server {
        server_name one.org;
        access_log logs/one.access;
        error_log logs/one.error error;
    }

    server {
        server_name two.org;
        access_log logs/two.access;
        error_log logs/two.error error;
    }

    server {
        listen 80;
        # Server name which maybe subdomain too using wildcard *.mydomain.com
        server_name localhost;  #|| IP;

        # this where nginx look for the static files of the site index.html, css etc.
        root /sites/demo; 

        # Prefix match: to match anything from this location
        location /greet {
            return 200 "Hello from Greeting but will also match /greet/anything";
        }

        # Exact match: to match specific to exact location
        location = /exact {
            return 200 "Hello from Greeting but will also match /greet";
        }

        # Regex match
        location ~* /regex[0-9] {
            return 200 "Hello from Greeting with regex with any number from 0 - 9. i.e. regex0 to regex9 and case Insensitive";
        }
    
        # Preferential prefix match
        location ^~/greet {
            return 200 "Hello from Greeting with matching the preferred skipping the first greet route";
        }

        # adding variables to location
        location /inspect {
            return 200 "$host\n$uri\n$args";
            # localhost/inspect will return 
            # req Ip
            # the path /inspect
            # and any variable added to the uri e.g. localhost/inspect?name=ray would be name=ray
        }


        if( $arg_apikey != 1234) {
            return 401 #unauthorized incorrect api key
        }

        # adding variables to location
        location /inspect {
            return 200 "$host\n$uri\n$args";
            #e.g. localhost/inspect?apikey=1234 will validate to true but without it will validate to false
        }

        # setting our own variables
        set $weekend 'No';

        if($date_local ~ 'Saturday|Sunday') {
            set $weekend 'Yes'
        }


        location /is_weekend {
            return 200 $weekend;
            #e.g. localhost/is_weekend will return yes if the day is saturday or sunday and No for every other days
        }

    # Redirect
        location /logo {
            return 307 /thumb.png;
            #e.g. since the logo is not in that location, nginx redirect the client to localhost/thumb.png
        }

    # Rewrite

        rewrite ^/user/\w+ /greet;

        location /greet {
            return 200 "Hello User";
            #visiting localhost/user/john will return the value of greet return since we rewite all matching ^/user/\w+ to /greet
            # though the broswer still showing the same user/john url but nginx rewite the request internally.
        }

# rewrite capturing variables from the request url
        rewrite ^/user/(\w+) /greet/$1; #^/user/(\w+)/(somethingels) /greet/$1 $2;
        rewrite ^/greet/john /thumb.png; #will only reolved when the uri = localhost/greet/john is requested;
         rewrite ^/user/(\w+) /greet/$1 last; #the last flag will restrict the uri to match /greet/john;


         location /greet {
             return 200 "Hello any user without extra params of name in the uri"
         }

        location = /greet/john {
            return 200 "Hello John";
            #only incoming uri with localhost/user/john will be rewritten to this route
        }

    # Try_files rewrite

        try_files $uri /thumb.png /greet /friendly_404; #adding $uri will resolve to any route added as args 

        location = /greet{
            return 200 "Hell try_files";
            #only incoming uri with localhost/thumb will be rewritten to this route
        }

        location /friendly_404{
            return 404 "No page as such found";
            #all unknow request will end here
        }

    # Named locations asigning a name to a location using try files
     try_files $uri /thumb.png /greet @friendly_404; #adding $uri will resolve to any route added as args 
        location @friendly_404{
            return 404 "No page as such found";
            #all unknow request will end here
        }

         # enabling access log
        location /secure/ {
            access_log /var/log/nginx/secure.access.log;
            access_log logs/access.log;  #this will log to global log file while upper one will create a new log file in the location
            return 200 "Welcome to secure area";
        }

        # disabling logs
        location /secure/ {
            access_log off; # to reduce server load and keep log file smaller
            return 200 "Welcome to secure area";
        }
    } 
    server {
        listen 80;
        server_name 167.99.93.26;

        root /sites/demo;

        index index.php index.html;

        location / {
            # This tries the incoming uri not found then tries the uri/ if not found then fallback to 404
            try_files $uri $uri/ =404;
        }

        # will match every request ending with .php
        location ~\.php$ {
            # Pass php request to the php-fpm service (fastcgi)
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.1-fpm.sock;
            # find / -name *fpm.sock to check the location before usage
        }

        # adding dynamic module
        location = /thumb.png {
            image_filter rotate 180; #flipping the images upside down.
        }
    }
    # setting expires headers for static location for gzip
    server {

 
        location = /thumb.png {
            add_header Cache-Control public;
            add_header Pragma public;
            add_header Vary Accept-Encoding;
            expires 1M;
        }

        location ~* \.(css|jpg|jpeg|png)$ {
            access_log off;
            add_header Cache-Control public;
            add_header Pragma public;
            add_header Vary Accept-Encoding;
            expires 1M;
        }
    # Enabling cache for dyniamic content e.g. php
       # cache by default
        set $no_cache 0;

    # Check for cache bypass
        if($arg_skipcache = 1) {
            set $no_cache 1; #needed for area with live data that doesnt need cached
        }

        location ~\.php$ {
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.1-fpm.sock; #that is just a verson of php that can be any other version

            fastcgi_cache ZONE_1;
            fastcgi_cache_valid 200 60m;
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }
    }

    # Redirecting as fall back to https
    server {
        listen 80;
        server_name $server_name;
        return 301 https://$host$request_uri;
    }

    # http2 server push, security

    server {

    # Http2 module for multiplex response
    listen 443 ssl http2;

    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    # Disable SSL
    ssl_protocols TLSv1.1 TLSv1.2; #connection now using TLS mor secure than SSL

    # Optimise cipher suits
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!ADECDH:!MD5; 

    # Enable DH Params for secure outmost secrecy between server and client communication
    ssl_dhparams /etc/nginx/ssl/dhparams.pem; #file need to created with openssl

    # Enable HSTS 
    add_header Strict-Transport-Security "max-age=31536000" always;

    # SSL sessions
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;
    ssl_session_tickets on;

    # Setting iframe header to same origin to prevent click hijacking
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block"; 
        

         # enable push for fast delivery of content using multiplex 
        location = /index.html {
            http2_push /style.css;
            http2_push /thumb.png;
        }  

        location / {
             #Enabling rate limit for a specific route for 5 extra request each per 
            #  seconds with nodeylay serving all request as soon as posspiple
            limit_req zone=MyZONE burst=5 nodelay;

            try_files $uri $uri/ =404;
        }

        location /admin/ {
            # Adding auth to route
            auth_basic "Secure Area"
            auth_basic_user_file /etc/nginx/.htpasswd;

            try_files $uri $uri/ =404;
        }
    }

}


# https://www.youtube.com/watch?v=lWjZSgXu5VU
# Types of directive?